Experiment 1.3: To understand the Container Lifecycle Management with Docker: Attached
& Detached Containers, Interactive Mode, Image and Container Deletion,
Automatic Removal of Stopped Containers.
CO2 Understand the Docker Container and various basic commands on images
CO3 Understand Docker Volumes and Management Manipulation
Outcomes of the Experiment
i. Learn to use each mode effectively based on the requirements of your application or workflow.
ii. Develop proficiency in running containers in interactive mode and executing commands
interactively within the container's environment.
iii. Understand the importance of managing dependencies between images and containers to ensure
smooth operations.
Acquire knowledge of the automatic removal feature in Docker that simplifies container cleanup.
Procedure:
i. Attached and Detached Containers:
Run a container in attached mode by executing the following command:
docker run -it <image-name>
Replace <image-name> with the name of the Docker image you want to run.
This command starts the container in attached mode, which means the container's input/output is
connected to the terminal where the command was executed.
To detach from the container without stopping it, press Ctrl + P followed by Ctrl + Q.
You'll return to the host terminal while leaving the container running in the background.
To reattach to a detached container, use the following command:
docker attach <container-name>
Replace <container-name> with the name or ID of the detached container.
ii. Interactive Mode:
Run a container in interactive mode by executing the following command:
docker run -it <image-name> <command>
Replace <image-name> with the name of the Docker image you want to run.
9
Replace <command> with the desired command to be executed inside the container.
This command starts the container in interactive mode, allowing you to interact with the container's shell
or command specified.
For example, to start a bash shell inside a Ubuntu container interactively, use:
docker run -it ubuntu bash
You can now execute commands within the container and see the output.
iii. Image and Container Deletion:
List all the Docker images on your system by running the command:
docker images
Identify the image you want to delete and note its IMAGE ID.
To delete an image, use the following command:
docker rmi <image-id>
Replace <image-id> with the actual IMAGE ID of the image you want to delete.
Before deleting an image, make sure there are no running containers based on that image. Stop and
remove any dependent containers first.
To delete a running or stopped container, use the following command:
docker rm <container-name>
Replace <container-name> with the name or ID of the container you want to delete.
iv. Automatic Removal of Stopped Containers:
By default, Docker does not automatically remove stopped containers.
To enable automatic removal of stopped containers, you can use the --rm option when running a
container:
docker run --rm <image-name>
When the container is stopped, it will be automatically removed.
This is useful for short-lived containers or when you don't need to persist the container after it finishes its
task.
By following these steps, you'll gain hands-on experience with container lifecycle management in
Docker, including working with attached and detached containers, interactive mode, image and container
deletion, and automatic removal of stopped containers. Make sure to replace <image-name>, <containername>, and <image-id> with the appropriate values based on your environment and the Docker images
and containers you're working with.
10
Relevant Demonstrative Video LINK
https://www.youtube.com/watch?v=aGeeg6A6S6k&t=20s
Other Resource materials or Web Links.
• Moby Project: https://mobyproject.org
• Runc: https://github.com/opencontainers/runc
• Containerd: https://containerd.io
Questions to be asked for Viva Voce of Experiment 1.3:
Q1. What do you understand by Docker Registries?
Q2. Name the common instruction in Dockerfile.
Q3. What is memory-swap flag?
Q4. How can you monitor the docker in production environments?
Q5. What do you understand by:
i. Docker hub
ii. Virtualization
iii. Hypervisor
iv. Docker object labels