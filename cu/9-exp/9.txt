EXPERIMENT 9
Experiment 3.2: Deploying a Node.js Application on Kubernetes with IBM Containers.
CO4 Implement Docker Communication, Dockerizing applications and Services
CO5 Explore the Kubernetes and Container Orchestration with the concept of microservices
Objective of the Experiment:
â€¢ To deploy a Node.js application on Kubernetes using IBM Containers
To managing pods with health checks, using kubectl commands to interact with the cluster, and
understanding the benefits of using Kubernetes with IBM Cloud.
Procedure:
Install kubectl: Download and install the kubectl command-line tool for managing Kubernetes
clusters.
Set up IBM Cloud Kubernetes Service:
Sign up for an IBM Cloud account and create an instance of the Kubernetes Service.
Install the IBM Cloud CLI and log in to your IBM Cloud account using the CLI.
Build the Node.js Application Container Image:
Create a directory for your Node.js application and navigate into it.
Create a Dockerfile to build the application container image. For example:
FROM node:14-alpine
WORKDIR /app
COPY package.json .
RUN npm install --production
COPY . .
EXPOSE 3000
CMD ["node", "index.js"]
Build the container image using the following command:
35
docker build -t my-node-app:1.0 .
Tag the image with the IBM Cloud Container Registry URL:
docker tag my-node-app:1.0 us.icr.io/<your-namespace>/my-node-app:1.0
Push the image to the IBM Cloud Container Registry:
docker push us.icr.io/<your-namespace>/my-node-app:1.0
Deploy the Application on Kubernetes:
Create a Kubernetes Deployment manifest, deployment.yaml, to define the application
deployment:
apiVersion: apps/v1
kind: Deployment
metadata:
 name: my-node-app-deployment
spec:
 replicas: 3
 selector:
 matchLabels:
 app: my-node-app
 template:
 metadata:
 labels:
 app: my-node-app
 spec:
 containers:
 - name: my-node-app-container
 image: us.icr.io/<your-namespace>/my-node-app:1.0
 ports:
 - containerPort: 3000
Apply the deployment manifest using the following command:
36
Copy code
kubectl apply -f deployment.yaml
Expose the Application with a Service:
Create a Kubernetes Service manifest, service.yaml, to expose the deployed application:
apiVersion: v1
kind: Service
metadata:
 name: my-node-app-service
spec:
 type: LoadBalancer
 selector:
 app: my-node-app
 ports:
 - protocol: TCP
 port: 80
 targetPort: 3000
Apply the service manifest using the following command:
kubectl apply -f service.yaml
Access the Deployed Application:
Retrieve the external IP address of the LoadBalancer service:
kubectl get service my-node-app-service
Access the application in a web browser using the external IP address.
Perform Pod Health Checking:
Check the health and status of the deployed pods:
kubectl get pods
kubectl describe pods
Experiment with different health checks and liveness probes to ensure pod health and availability.
37
Clean Up:
To clean up the resources created, delete the deployment and service:
kubectl delete deployment my-node-app-deployment
kubectl delete service my-node-app-service
Relevant Demonstrative Video LINK.
https://www.youtube.com/watch?v=CfPRbdT-wXo
Other Resource materials or Web Links.
https://loopback.io/doc/en/lb4/deploying_to_ibm_cloud_kubernetes.html
Questions to be asked for Viva Voce of Experiment 3.2:
Q1. What is the difference between deploying applications on hosts and containers?
Q2. What are the main components of Kubernetes architecture?
Q3. What is a node in Kubernetes?
Q4. What process runs on Kubernetes Master Node?
Q5. Discuss usage a pod in Kubernetes?